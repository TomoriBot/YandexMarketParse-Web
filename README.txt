Принцип работы.

1. Структура решения.
1.1 Решение состоит из двух проектов:
- YMParseWeb (главный). Это WebApi проект на платформе ASP.NET Core, но не кроссплатформенный и, по сути, является не Core, а .NET Framework. На основе этого проекта было создано решение.
Содержит следующие ключевые папки и файлы:
-- Controllers (папка) содержащая файлы контроллеры, которые отвечают за отлов и какое-либо взаимодействие с полученными данными. На данный момент, там хранится 1 файл - ParseController.cs.
Файл ParseController содержит 1 метод Get, который принимает данные указанные в URL строке (прим. api/parse/text=ssd&&pagecount=1). Возбуждение метода происходит при обращении к нему через путь <ServerIpAddres>/api/parse/<UrlPath> (url строка в браузере Chrome, по неясным мне причинам, может содержать не более ~255 символов).
- Services (дополнительный) — проект библиотеки классов .NET Framework. Нужен для распределения типов задач. Например, главный проект YMParseWeb нужен лишь для получения и распределния задач, а проект Services для выполнения задач с этими данными.
Содержит следующие ключевые папки и файлы:
-- Models (папка), что содержит классы со свойствами описания тех или иных сущностей;
-- Services (папка), которая содержит набор классов для работы с теми или иными задачами (файл FileService.cs был реализован для вывода собранных данных в Excel файл, но сейчас не используется). Например, файл ParseService.cs содержит основной набор методов для работы парсера.
2. Как работает?
2.1 Отправка и получение запроса.
Робот формирует необходимую строку запроса опираясь на файл, после чего происходит отправка GET запроса по пути <ServerIpAddres>/api/parse/<UrlPath>, где <ServerIpAddres> - это ip адрес или домен сервера на котором лежит программа, а <UrlPath> - это сфоримровання строка запроса. Если Url строка соответсвует структуре примера, то должен сработать метод Get в файле ParseController. Метод, первым делом, проверяет наличие необходимых прокси адресов в файле proxies.txt.
2.2 Проверка прокси.
За проверку прокси отвечат файл ProxyService.cs и метод CheckList. Сначала открывается файл proxies.txt, который находится в корне решения и включает в себя 101 строку, где строка №1 - это дата создания файла, а остальные - список ip адресов прокси сервисов. Если этот файл не создан, значит создается.
2.2.1 Создание файла proxies.txt и установка необходимых данных.
За создание и установку данных в файл отвечает соответствующий метод (SetProxiesToFile). Обычно он вызывается в случаях, когда проверка вернула false. Метод имеет необязательный параметр string[] data, он нужен для указания массива прокси адресов, если этот параметр пуст, то вызывается метод для получения списка прокси средствами API сервиса htmlweb.ru. У сервиса есть ограничение на 400 прокси адресов для одного ip адреса (можно на сайте почистить куки и получить новый список через другой ip). После получения списка адресов, они записываются в только созданный файл proxies.txt.
2.3 Парсинг.
Если с проверкой или созданием прокси не возникло проблем, то вызывается метод ParseFewQueries, который полученную строку запроса делит на массив подстрок, которые, в свою очередь, являются строками запроса различных товаров, и вызывает основной метод парсинга (ParseOneQuery) для работы с каждой подстрокой отдельно.


******

Инструкция для работа.

1. Запрос. Формирование запроса.
1.1 При формировании запроса необходимо:
- заменить пробелы на их кодовое значение - <%20>;
- заменить символы <!>, <*>, <'>, <(>, <)>, <&>, <=>, <+>, <$>, </>, <,>, <@>, <;>, <:>, <?> на кодовое значение пробела;
- удалить зарезирвированные символы (https://ru.wikipedia.org/wiki/URL#Реализация);
- в начало строки запроса записать конструкцию search?.

? После получения запроса необходимо:
- сменить подстроку <&amp;> на символ <&>.

Пример строки запроса: localhost/api/parse/search?text=ssd&&pagecount=1andtext=hdd&&partnumber=16532&&city=kazan&&positionscount=20

Примечание.
Список прокси в фаайле перемешивается после каждого успешного запроса. То есть, после того как получили данные с 1 страницы, перемешиваем список в файле и идем дальше.